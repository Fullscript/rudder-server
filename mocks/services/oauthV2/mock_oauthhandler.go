// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/oauth/v2 (interfaces: OAuthHandler)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/oauthV2/mock_oauthhandler.go -package=mock_oauthV2 github.com/rudderlabs/rudder-server/services/oauth/v2 OAuthHandler
//

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	json "encoding/json"
	reflect "reflect"

	v2 "github.com/rudderlabs/rudder-server/services/oauth/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOAuthHandler is a mock of OAuthHandler interface.
type MockOAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthHandlerMockRecorder
	isgomock struct{}
}

// MockOAuthHandlerMockRecorder is the mock recorder for MockOAuthHandler.
type MockOAuthHandlerMockRecorder struct {
	mock *MockOAuthHandler
}

// NewMockOAuthHandler creates a new mock instance.
func NewMockOAuthHandler(ctrl *gomock.Controller) *MockOAuthHandler {
	mock := &MockOAuthHandler{ctrl: ctrl}
	mock.recorder = &MockOAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthHandler) EXPECT() *MockOAuthHandlerMockRecorder {
	return m.recorder
}

// AuthStatusToggle mocks base method.
func (m *MockOAuthHandler) AuthStatusToggle(params *v2.StatusRequestParams) v2.StatusCodeError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStatusToggle", params)
	ret0, _ := ret[0].(v2.StatusCodeError)
	return ret0
}

// AuthStatusToggle indicates an expected call of AuthStatusToggle.
func (mr *MockOAuthHandlerMockRecorder) AuthStatusToggle(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStatusToggle", reflect.TypeOf((*MockOAuthHandler)(nil).AuthStatusToggle), params)
}

// FetchToken mocks base method.
func (m *MockOAuthHandler) FetchToken(params *v2.OAuthTokenParams) (json.RawMessage, v2.StatusCodeError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchToken", params)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(v2.StatusCodeError)
	return ret0, ret1
}

// FetchToken indicates an expected call of FetchToken.
func (mr *MockOAuthHandlerMockRecorder) FetchToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchToken", reflect.TypeOf((*MockOAuthHandler)(nil).FetchToken), params)
}

// RefreshToken mocks base method.
func (m *MockOAuthHandler) RefreshToken(params *v2.OAuthTokenParams, previousSecret json.RawMessage) (json.RawMessage, v2.StatusCodeError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", params, previousSecret)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(v2.StatusCodeError)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockOAuthHandlerMockRecorder) RefreshToken(params, previousSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockOAuthHandler)(nil).RefreshToken), params, previousSecret)
}
