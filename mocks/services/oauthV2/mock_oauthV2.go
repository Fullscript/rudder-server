// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/oauth/v2 (interfaces: AuthIdentityProvider)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/oauthV2/mock_oauthV2.go -package=mock_oauthV2 github.com/rudderlabs/rudder-server/services/oauth/v2 AuthIdentityProvider
//

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	reflect "reflect"

	identity "github.com/rudderlabs/rudder-server/services/controlplane/identity"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthIdentityProvider is a mock of AuthIdentityProvider interface.
type MockAuthIdentityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthIdentityProviderMockRecorder
	isgomock struct{}
}

// MockAuthIdentityProviderMockRecorder is the mock recorder for MockAuthIdentityProvider.
type MockAuthIdentityProviderMockRecorder struct {
	mock *MockAuthIdentityProvider
}

// NewMockAuthIdentityProvider creates a new mock instance.
func NewMockAuthIdentityProvider(ctrl *gomock.Controller) *MockAuthIdentityProvider {
	mock := &MockAuthIdentityProvider{ctrl: ctrl}
	mock.recorder = &MockAuthIdentityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthIdentityProvider) EXPECT() *MockAuthIdentityProviderMockRecorder {
	return m.recorder
}

// Identity mocks base method.
func (m *MockAuthIdentityProvider) Identity() identity.Identifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(identity.Identifier)
	return ret0
}

// Identity indicates an expected call of Identity.
func (mr *MockAuthIdentityProviderMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockAuthIdentityProvider)(nil).Identity))
}
